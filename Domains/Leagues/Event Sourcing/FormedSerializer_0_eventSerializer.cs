//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

/// <remarks>
/// Each league will have an unique name
/// </remarks>
namespace Leagues.League.eventDefinition
{
    using System.Collections.Generic;
    using System.Runtime.Serialization;


    /// <summary>
    /// A new league was formed
    /// </summary>
    public partial class FormedSerializer : CQRSAzure.EventSourcing.EventSerializer<Formed>
    {
        
        protected FormedSerializer(System.Func<IFormatter> getStreamFormatter, System.Func<Formed, IDictionary<string, object>> saveNameValuePairsFunction, System.Func<IDictionary<string, object>, Formed> readNameValuePairsFunction) : 
                base(getStreamFormatter, saveNameValuePairsFunction, readNameValuePairsFunction)
        {
        }
        
        public static FormedSerializer Create(System.Func<IFormatter> getStreamFormatter, System.Func<Formed, IDictionary<string, object>> saveNameValuePairsFunction, System.Func<IDictionary<string, object>, Formed> readNameValuePairsFunction)
        {
            return new FormedSerializer(getStreamFormatter, saveNameValuePairsFunction, readNameValuePairsFunction);
        }
        
        public static IDictionary<string, object> SaveNameValuePairsFunction(Formed FormedEvent)
        {
            Dictionary<string, object> ret = new Dictionary<string, object>();
            ret.Add("Date Incorporated", FormedEvent.Date_Incorporated);
            ret.Add("Location", FormedEvent.Location);
            ret.Add("Notes", FormedEvent.Notes);
            return ret;
        }
        
        public static Formed ReadNameValuePairsFunction(IDictionary<string, object> properties)
        {
            System.DateTime Date_Incorporated_In;
            string Location_In;
            string Notes_In;
            Date_Incorporated_In = ((System.DateTime)(properties["Date Incorporated"]));
            Location_In = ((string)(properties["Location"]));
            Notes_In = ((string)(properties["Notes"]));
            Formed ret = new Formed(Date_Incorporated_In, Location_In, Notes_In);
            return ret;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Leagues.League.eventDefinition;
using CQRSAzure.EventSourcing;
using System;
using Newtonsoft.Json.Linq;

namespace Leagues.League.projection
{

    [DomainNameAttribute("Leagues")]
    [Category("Organisation")]
    [ProjectionName("League Summary Information") ]
    public partial class League_Summary_Information 
        : CQRSAzure.EventSourcing.ProjectionBaseUntyped, 
        ILeague_Summary_Information
    {
        
        /// <summary>
        /// Current location of the league
        /// </summary>
        public string Location
        {
            get
            {
                return base.GetPropertyValue<string>("Location");
            }
        }
        
        /// <summary>
        /// The twitter handle used by this league 
        /// </summary>
        /// <remarks>
        /// This can be used to broadcast results or notifications
        /// </remarks>
        public string Twitter_Handle
        {
            get
            {
                return base.GetPropertyValue<string>("Twitter_Handle");
            }
        }
        
        /// <summary>
        /// The date this league was incorporated
        /// </summary>
        public System.DateTime Date_Incorporated
        {
            get
            {
                return base.GetPropertyValue<System.DateTime>("Date_Incorporated");
            }
        }
        
        public override bool SupportsSnapshots
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// A new league was formed
        /// </summary>
        public void HandleEvent(IFormed eventToHandle)
        {
            // Date Incorporated is set when a league is initially formed
            // Location is intially set when the league is formed
        }
        
        /// <summary>
        /// The contact details for the league have changed
        /// </summary>
        public void HandleEvent(IContact_Details_Changed eventToHandle)
        {
            // Twitter handle is set whenever the contact details change
        }
        
        public override void HandleEventJSon(String eventFullName, JObject eventToHandle)
        {
            if ((eventFullName == typeof(Formed).FullName))
            {
                // Handle the Formed event
                this.HandleEvent<Formed>(eventToHandle.ToObject<Formed>());
            }
            if ((eventFullName == typeof(Contact_Details_Changed).FullName))
            {
                // Handle the Contact Details Changed event
                this.HandleEvent<Contact_Details_Changed>(eventToHandle.ToObject<Contact_Details_Changed>());
            }
        }
        
        /// <summary>
        /// Does the projection handle this event type
        /// </summary>
        /// <param name="eventTypeFullName">
        /// The event type to check
        /// </param>
        /// <remarks>
        /// Event types handled
        /// Formed - A new league was formed
        /// Contact Details Changed - The contact details for the league have changed
        /// </remarks>
        public override bool HandlesEventTypeByName(String eventTypeFullName)
        {
            if ((eventTypeFullName == typeof(Formed).FullName))
            {
                return true;
            }
            if ((eventTypeFullName == typeof(Contact_Details_Changed).FullName))
            {
                return true;
            }
            return false;
        }
        
        /// <summary>
        /// Does the projection handle this event type
        /// </summary>
        /// <param name="eventType">
        /// The event type to check
        /// </param>
        /// <remarks>
        /// Event types handled
        /// Formed - A new league was formed
        /// Contact Details Changed - The contact details for the league have changed
        /// </remarks>
        public override bool HandlesEventType(Type eventType)
        {
            if ((eventType == typeof(Formed)))
            {
                return true;
            }
            if ((eventType == typeof(Contact_Details_Changed)))
            {
                return true;
            }
            return false;
        }
        
        public override void HandleEvent<TEvent>(TEvent eventToHandle)
        
        {
            if ((eventToHandle.GetType() == typeof(Formed)))
            {
                // Handle the Formed event
                this.HandleEvent<Formed>(eventToHandle as Formed);
            }
            if ((eventToHandle.GetType() == typeof(Contact_Details_Changed)))
            {
                // Handle the Contact Details Changed event
                this.HandleEvent<Contact_Details_Changed>(eventToHandle as Contact_Details_Changed);
            }
        }
    }
}

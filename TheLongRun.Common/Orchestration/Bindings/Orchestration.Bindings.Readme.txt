Orchestration Bindings
======================

These bindings allow for event stream backed orchestrations to call out to each other
and receive a call back accress to which results should be posted.

e.g. 
  [ Query ] ---> [ Identifier Group ] ---> [ Classifier * ]
      ^                 ^       |                    |
      |                 |       |                    |
	  |                 \_______|____________________/
	  |                         |
	  \_________________________/

For an example of how this sort of thing is done, look at the DurableTask orchestration
(https://github.com/Azure/azure-functions-durable-extension/blob/master/src/WebJobs.Extensions.DurableTask/Bindings/OrchestrationTriggerAttributeBindingProvider.cs)

For information about the constituent parts of bindings, use this documentation:
https://github.com/Azure/azure-webjobs-sdk-extensions/wiki/Binding-Extensions

Routing
-------
Each orchestrator has routing in the form:
Domain/Type/Name/Instance
Where type is [Group|Projection|Query|Command|Classifier]

e.g.
TheLongRun-Leagues/Command/Add-League/{1234-ABCD1-0A098A123E1F}

This can be passed to the serverless function either as a string or as a JObject.
If it is passed as a string it can be the routing as JSOn in the string or a From::To::Extra formatted string.

Process flow
------------
The higher level orchestration triggers the level below it and passes it a call-back reference to tell it what event stream to 
use to write results to.  When the lower level orchestration completes its work it writes to the higher level orchestration
with the results before calling back to it.

At each level the orchestration is in charge of deriving its own state before running - state is NOT passed between orchestrations
as that would reduce the resiliency that we need.

In addition a [Command] can post aggregate events as a result of its postings.  A seperate aggregate orchestration process is 
used for that.
<?xml version="1.0"?>
<doc>
<assembly>
<name>
CQRSAzure.QueryHandler
</name>
</assembly>
<members>
<member name="T:CQRSAzure.QueryHandler.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:CQRSAzure.QueryHandler.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:CQRSAzure.QueryHandler.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:CQRSAzure.QueryHandler.CQRSQueryHandlerConfigurationSection">
 <summary>
 Wrapper class for the possible configuration elements and element collections that affect how this 
 query handler operates.
 </summary>
</member>
<member name="P:CQRSAzure.QueryHandler.CQRSQueryHandlerMappingElement.DefinitionName">
 <summary>
 Unique fully qualified class name of the query definition class
 </summary>
</member>
<member name="P:CQRSAzure.QueryHandler.CQRSQueryHandlerMappingElement.HandlerName">
 <summary>
 Fully qualified class name of the query handler class
 </summary>
</member>
<member name="M:CQRSAzure.QueryHandler.CQRSQueryHandlerMappingElementCollection.GetElementKey(System.Configuration.ConfigurationElement)">
 <summary>
 The command definition is the unique key
 </summary>
 <param name="element">
 The full configuration element for which to retireve the key
 </param>
 <returns></returns>
</member>
<member name="P:CQRSAzure.QueryHandler.CQRSQueryHandlerSettingsElement.Name">
 <summary>
 Unique name by which the handler is known
 </summary>
 <remarks>
 Ideally a human readable unique name should be used to aid debugging/logging
 </remarks>
</member>
<member name="T:CQRSAzure.QueryHandler.IHostQueryhandlerSettings">
 <summary>
 Settings pertaining to a query handler host
 </summary>
</member>
<member name="P:CQRSAzure.QueryHandler.IQueryHandlerMapping.DefinitionName">
 <summary>
 Unique fully qualified class name of the query definition class
 </summary>
</member>
<member name="P:CQRSAzure.QueryHandler.IQueryHandlerMapping.HandlerName">
 <summary>
 Fully qualified class name of the query handler class
 </summary>
</member>
<member name="T:CQRSAzure.QueryHandler.GetCommandStatusQueryHandler">
 <summary>
 A query handler to get the status of the given command
 </summary>
 <remarks>
 Commands are held in a a specially named event stream 
 </remarks>
</member>
<member name="T:CQRSAzure.QueryHandler.QueryHandlerBase`2">
 <summary>
 Base class for any specific query handling class that returns a single set of results
 </summary>
 <typeparam name="TQueryDefinition"></typeparam>
 <typeparam name="TResultType"></typeparam>
 <remarks>
 This is to hold common cross-cutting functionality that applies to all query handlers (such as routing, error notifications, logging etc.)
 </remarks>
</member>
<member name="M:CQRSAzure.QueryHandler.QueryHandlerBase`2.HandleQuery(`0)">
 <summary>
 Handle the specific query instance and return the results
 </summary>
 <param name="qryToHandle">
 The specific instance of the query and its input parameters
 </param>
 <returns>
 A populated data type as required by the query definition
 </returns>
</member>
<member name="T:CQRSAzure.QueryHandler.QueryHandlerMultiRowBase`2">
 <summary>
 Base class for any specific query handling class that returns an array of results
 </summary>
 <typeparam name="TQueryDefinition"></typeparam>
 <typeparam name="TResultType"></typeparam>
 <remarks>
 This is to hold common cross-cutting functionality that applies to all query handlers (such as routing, error notifications, logging etc.) and to allow
 for asynchronous aggregation of results
 </remarks>
</member>
<member name="M:CQRSAzure.QueryHandler.QueryHandlerMultiRowBase`2.HandleQuery(`0)">
 <summary>
 Handle the specific query instance and return the results as a collection
 </summary>
 <param name="qryToHandle">
 The specific instance of the query and its input parameters
 </param>
 <returns>
 A populated data type as required by the query definition
 </returns>
</member>
<member name="T:CQRSAzure.QueryHandler.QueryHandlerFactory">
 <summary>
 Factory methods for spinning-up instances of query handlers for given query definitions
 </summary>
</member>
<member name="M:CQRSAzure.QueryHandler.QueryHandlerFactory.Initialise">
 <summary>
 Perform the start-up initialisations neccessary to link query handlers up to their definitions
 </summary>
 <remarks>
 These may be declared in a config file or may be discovered by reflection as desired
 </remarks>
</member>
<member name="M:CQRSAzure.QueryHandler.QueryHandlerFactory.Create``2(``0)">
 <summary>
 Create a query handler to handle the specified query definition 
 </summary>
 <typeparam name="TQueryDefinition">
 The type that defines the query inputs 
 </typeparam>
 <typeparam name="TResultType">
 The type that defines the query expected returns
 </typeparam>
 <param name="queryInstance">
 A specific instance of the query inputs
 </param>
 <returns>
 An instance of a query handler class that can handle this query definition and return results
 </returns>
</member>
<member name="T:CQRSAzure.QueryHandler.IQueryHandler`2">
 <summary>
 Base interface for any class which handles a specific query and returns the required data
 </summary>
 <typeparam name="TQueryDefinition">
 The type that defines the query
 </typeparam>
 <typeparam name="TResultType">
 The type that defines the data returned from the query
 </typeparam>
</member>
<member name="M:CQRSAzure.QueryHandler.IQueryHandler`2.HandleQuery(`0)">
 <summary>
 Perform the function for the underlying query and return the required results
 </summary>
 <param name="qryToHandle">
 The definition of the query (including input parameters)
 </param>
 <returns>
 A populated result set per the query definition
 </returns>
</member>
</members>
</doc>

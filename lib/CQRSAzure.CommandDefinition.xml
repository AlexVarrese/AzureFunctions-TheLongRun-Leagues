<?xml version="1.0"?>
<doc>
<assembly>
<name>
CQRSAzure.CommandDefinition
</name>
</assembly>
<members>
<member name="T:CQRSAzure.CommandDefinition.CommandParameter`1">
 <summary>
 A single parameter that is used to affect how (and on what) a command operates
 </summary>
 <remarks>
 This is an immutable class to allow for safe parallel/asynchronous processing
 </remarks>
 <typeparam name="TValue" >
 The data type of the value held for this parameter
 </typeparam>
</member>
<member name="P:CQRSAzure.CommandDefinition.CommandParameter`1.Name">
 <summary>
 The name of the parameter
 </summary>
 <remarks>
 This should be unique in any given command definition, unless there are multuiple indexed properties with the same name
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.CommandParameter`1.Index">
 <summary>
 The index (zero based) of the parameter
 </summary>
 <remarks>
 For a non-indexed parameter, this will always be zero
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.CommandParameter`1.Value">
 <summary>
 The value of the parameter
 </summary>
</member>
<member name="M:CQRSAzure.CommandDefinition.CommandParameter`1.#ctor(System.String,System.Int32,`0)">
 <summary>
 Creatre a new parameter instance with the given properties
 </summary>
 <param name="nameInit">
 The name of the parameter
 </param>
 <param name="indexInit">
 The zero-based index of the parameter
 </param>
 <param name="valInit">
 The starting value of the parameter - this can be Nothing (null) to indicate that the parameter is not set
 </param>
 <remarks></remarks>
</member>
<member name="M:CQRSAzure.CommandDefinition.CommandParameter`1.Create``1(System.String,System.Int32,``0)">
 <summary>
 Create a new parameter for the given properties
 </summary>
 <param name="name">
 The name of the parameter
 </param>
 <param name="index">
 The zero-based index of the parameter
 </param>
 <param name="value">
 The value to use for this parameter
 </param>
</member>
<member name="M:CQRSAzure.CommandDefinition.CommandParameter`1.GetParameterKey(CQRSAzure.CommandDefinition.ICommandParameter)">
 <summary>
 Get the unique key of the given parameter as a string
 </summary>
 <param name="parameter">
 The parameter for which to get the key
 </param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:CQRSAzure.CommandDefinition.CommandDefinitionBase">
 <summary>
 Base class from which the command definitions should be build
 </summary>
 <remarks>
 To avoid a fragile base class do not add any functionality to this class that is not related to the attaching of
 parameters to a command
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.CommandDefinitionBase.CommandName">
 <summary>
 The unique name for the command 
 </summary>
 <remarks>
 This must be provided by the implementing class as each command should have an unique name
 </remarks>
</member>
<member name="T:CQRSAzure.CommandDefinition.PingCommandDefinition">
 <summary>
 A ping command is a command that doesn't perform any action as such but can be used to check that all of the 
 command handling processes are functional
 </summary>
 <remarks>
 The parameters of this command are used to verify the command system is persisting and handling commands correctly
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.PingCommandDefinition.Initiated">
 <summary>
 The date/time that this ping was initiated
 </summary>
 <remarks>
 This can be used to measure latency in the command handler process
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.PingCommandDefinition.Source">
 <summary>
 The source that sent the ping command
 </summary>
</member>
<member name="P:CQRSAzure.CommandDefinition.PingCommandDefinition.CommandName">
 <summary>
 The command name - "Ping"
 </summary>
</member>
<member name="T:CQRSAzure.CommandDefinition.ICommandDefinition">
 <summary>
 Identifies a class as being a command definition that can be handled by the CommandHandler linked to it to perform
 an action
 </summary>
 <remarks>
 Each specific definition will have one matching handler
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.ICommandDefinition.InstanceIdentifier">
 <summary>
 Unique identifier of this command instance
 </summary>
</member>
<member name="P:CQRSAzure.CommandDefinition.ICommandDefinition.Name">
 <summary>
 The name of the command being performed
 </summary>
 <remarks>
 This should be unique in any given domain so that it can be used as part of an audit trail prcoess
 </remarks>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandDefinition.AddParameter``1(CQRSAzure.CommandDefinition.CommandParameter{``0})">
 <summary>
 Add a paremeter to this command
 </summary>
 <param name="parameter">
 The parameter to add to the command
 </param>
 <remarks>
 This will throw an argument exception if this command already has a parameter with the same name and index.  
 Use TryAddParameter to avoid this exception
 </remarks>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandDefinition.TryAddParameter``1(CQRSAzure.CommandDefinition.CommandParameter{``0})">
 <summary>
 Add a paremeter to this command
 </summary>
 <param name="parameter">
 The parameter to add to the command
 </param>
 <remarks>
 This will return true if the parameter was successfully added
 </remarks>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandDefinition.GetParameterValue``1(System.String,System.Int32)">
 <summary>
 Get the specified parameter for this command
 </summary>
 <typeparam name="TParam">
 The underlying data type of the parameter value
 </typeparam>
 <param name="ParameterName">
 The name of the parameter to get
 </param>
 <param name="ParameterIndex">
 The index of the parameter (if it is an array/list - otherwise this will be zero)
 </param>
 <returns>
 The specified parameter (if it has been set)
 </returns>
 <remarks>
 If this parameter does not exist then an exception is thrown.  A TryGet variant and a ParameterExists function exist and should be used in place of
 this function as exception handling is an expensive process to be avoided in normal processing
 </remarks>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandDefinition.SetParameterValue``1(System.String,System.Int32,``0@)">
 <summary>
 Sets the specified parameter for this command to the gven value
 </summary>
 <typeparam name="TValueType">
 The udnerlying data type of the parameter being set
 </typeparam>
 <param name="parameterName">
 The name of the parameter being set
 </param>
 <param name="parameterIndex">
 Zero-vased index of the parameter value (will always be zero if this is not an array)
 </param>
 <param name="value">
 The specific value being set 
 </param>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandDefinition.TryGetParameterValue``1(System.String,System.Int32,``0@)">
 <summary>
 Get the specified parameter for this command
 </summary>
 <typeparam name="TParam">
 The underlying data type of the parameter value
 </typeparam>
 <param name="ParameterName">
 The name of the parameter to get
 </param>
 <param name="ParameterIndex">
 The index of the parameter (if it is an array/list - otherwise this will be zero)
 </param>
 <param name="Value">
 The value currently set for this command parameter
 </param>
 <returns>
 True if the parameter value exists
 </returns>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandDefinition.ParameterExists(System.String,System.Int32)">
 <summary>
 Does the specified parameter exist for this command
 </summary>
 <param name="ParameterName">
 The name of the parameter
 </param>
 <param name="ParameterIndex">
 The index of the parameter (if it is an array) or 0 for non indexed parameters
 </param>
 <returns>
 True if the parameter exists for this command
 </returns>
</member>
<member name="T:CQRSAzure.CommandDefinition.ICommandParameter">
 <summary>
 Identifies a single parameter that is used to affect how (and on what) a command operates
 </summary>
</member>
<member name="P:CQRSAzure.CommandDefinition.ICommandParameter.Name">
 <summary>
 The name of the parameter
 </summary>
 <remarks>
 This should be unique in any given query definition, unless there are multuiple indexed properties with the same name
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.ICommandParameter.Index">
 <summary>
 The index (zero based) of the parameter
 </summary>
 <remarks>
 For a non-indexed parameter, this wuill always be zero
 </remarks>
</member>
<member name="P:CQRSAzure.CommandDefinition.ICommandParameter.Value">
 <summary>
 The value attached to the command parameter
 </summary>
 <returns>
 </returns>
</member>
<member name="M:CQRSAzure.CommandDefinition.ICommandParameter.SetValue(System.Object)">
 <summary>
 Set the actual value part of the command parameter
 </summary>
 <param name="value">
 The value to be set
 </param>
</member>
</members>
</doc>
